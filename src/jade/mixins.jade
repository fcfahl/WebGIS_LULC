mixin addPlugin(name, type)
    //- leaflet plugins
    - if (type == 'bower')
      - var folder = 'bower_components/' + name
    - else
      - var folder = name

    script(src=folder) 

mixin addCSS(name, type)
    //- leaflet plugins
    - if (type == 'bower')
      - var folder = 'bower_components/'  + name
    - else
      - var folder = name
    link(rel="stylesheet" type="text/css" href=folder)

mixin tabs_bootstrap(classLI,classA,name,tab,bool)
    - var idA = name + "-tab"
    - var ref = "#" + name

    li(class=classLI)
        a(class=classA href=ref role=roleA id=idA data-toggle="tab" aria-controls=name aria-expanded=bool)=tab

mixin accorde(section,group)
  //- read db.json
  - var obj = locals[0].Layers
  - var classes = locals[0].UrbanAtlas_06

  .group
    - var index = 0
    h3=section
    div(id=group)
        each layer in obj
            - var ID = layer.ID
            - var NM = layer.Name
            - var cat = layer.Category
            if section == cat
              div(id=ID class='draggable')
                li
                  input(type="checkbox" value=ID class="boxlayer" checked='false' rel="#{index++}")
                  label(for=ID)
                    span=NM

        if group == 'WMS_external'
            +Capabilities

        if group == 'geotag'
            +Geotag        
            +photo_Modal

        if group == 'atlas'
            +Atlas(classes[0])
            
mixin Capabilities()
    .getCapabilities
        form(class="form-inline")
            div(class="form-group")
                label(class="sr-only" for="form_capabilities" WMS Get Capabilities)
                input(type="text", class="form-control form-control", id="wms_capability", placeholder="enter getcapabilities address", value="http://wms.pcn.minambiente.it/ogc?map=/ms_ogc/WMS_v1.3/Vettoriali/Carta_ecopedologica.map&service=wms&request=getCapabilities&version=1.3.0")

                //- http://image.discomap.eea.europa.eu/arcgis/services/UrbanAtlas/Urban_Atlas_2012/MapServer/WMSServer?service=WMS&request=GetCapabilities&version=1.3.0

            button(type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modalWindow" id="wms_submit") Submit

            +wms_Modal

    .custom_Layers

mixin Geotag()
    div(class="switch-buttons")
        +switch_button("Flickr", "btn_Flick") 
        +switch_button("Panoramio", "btn_Pano") 
        +switch_button("Geograph", "btn_Geog") 
        

    div(class="photo-control")
        div(class="page-buttons")
            div(class="photo-page-back")
                button(type="button" class="btn btn-secondary-outline btn-sm" id="bt-page-back")
                    i(class="fa fa-backward" aria-hidden="true")
            div(class="photo-page-text" id="page-number")
                spam Page 1
            div(class="photo-page-forw")
                button(type="button" class="btn btn-secondary-outline btn-sm" id="bt-page-forw")
                    i(class="fa fa-forward" aria-hidden="true")
            div(class="photo-settings")
                button(type="button" class="btn btn-secondary-outline btn-sm" data-toggle="modal" data-target="#modalPhoto" id="photo_submit")
                    i(class="fa fa-cogs" aria-hidden="true")
    
mixin Atlas(land)

    .atlas-select
        form(class="form-inline")
            div(class="form-group")
                label(for="atlas-select-cities" Add Layer: )
                input(type="text", class="form-control form-control-sm", id="atlas-cities", placeholder="click over the city location")
            button(type="button" class="btn btn-primary btn-sm" data-name="" data-id="" id="atlas_add") Add
            //- button(type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modalAtlas"  id="atlas_submit") Submit

        //- +atlas_Modal

    .atlas-layers

    .atlas-template
        +atlas_Modal
        
        //- div(class="atlas-select-layer" id="atlas-name-layer")
        //-     spam Page 1

    //- each land_class in land
    //-     - var Code = land_class.Code
        //- p  "#{Code}"
        //- div(id=ID class='draggable')
        //-   li
            //- input(type="checkbox" value=Code class="boxlayer" checked='false' rel="#{index++}")
            //- label(for=ID)
            //-   span=NM

mixin atlas_Modal ()
    div(class="modal fade"  id="modal-template" tabindex="-1" role="dialog" aria-labelledby="wms" aria-hidden="true")
        div(class="modal-dialog" role="document")
            div(class="modal-content")
                div(class="modal-header")
                    button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                        span(aria-hidden="true") &times;
                    h2(class="atlas-header") Urban Atlas: 
                div(class="modal-body")
                    .atlasList
                        ul(class="list-group")

                            input(type="checkbox" value="atlas_layer_WMS" class="boxlayer" checked='false')
                            label(for="atlas_layer_WMS")
                              span="Display as WMS layer (faster)"

                            input(type="checkbox" value="atlas_layer_WFS" class="boxlayer" checked='false')
                            label(for="atlas_layer_WFS")
                              span="Display as WFS layer (slower)"
                        

                div(class="modal-footer")
                    button(type="button" class="btn btn-primary " id="atlas_close" data-dismiss="modal") Close

    
mixin wms_Modal()
    .wmsModal
        div(class="modal fade"  id="modalWindow" tabindex="-1" role="dialog" aria-labelledby="wms" aria-hidden="true")
            div(class="modal-dialog" role="document")
                div(class="modal-content")
                    div(class="modal-header")
                        button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                            span(aria-hidden="true") &times;
                        h2 Available WMS Layers
                    div(class="modal-body")
                        .wmsList
                            ul(class="list-group")
                            

                    div(class="modal-footer")
                        button(type="button" class="btn btn-secondary " id="wms_close" data-dismiss="modal") Close
                        button(type="button" class="btn btn-primary" id="wms_add"  data-dismiss="modal") Add Selected Layers
    
mixin photo_Modal()
    .photo-Modal
        div(class="modal fade"  id="modalPhoto" tabindex="-1" role="dialog" aria-labelledby="geotag" aria-hidden="true")
            div(class="modal-dialog" role="document")
                div(class="modal-content")
                    div(class="modal-header")
                        button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                            span(aria-hidden="true") &times;
                        h2 Photo Search Parameters
                    div(class="modal-body")
                        div(class="photoList")
                            form
                                .form-group.row
                                    label(class="col-sm-5 form-control-label" for="photo_query") Photo text*: 
                                    input(type="text" class="col-sm-6 form-control" id="photo_query" placeholder="free text search on title, description and tags" value="")
                                .form-group.row
                                    label(class="col-sm-5 form-control-label" for="photo_tag") Photo tag*:
                                    input(type="text" class="col-sm-6 form-control" id="photo_tag" placeholder="comma-delimited list of tags" value="")
                                .form-group.row
                                    label(class="col-sm-5 form-control-label" for="photo_number") Number of photos:
                                    input(type="text" class="col-sm-6 form-control" id="photo_number" placeholder="max=50" value="10")
                                .form-group.row
                                    label(class="col-sm-5 form-control-label" for="photo_year") Year of the photo*:
                                    input(type="text" class="col-sm-6 form-control" id="photo_year" placeholder="" value="")
                        
                    div(class="modal-footer")
                        .col-1
                            h4 * Search criteria not available for Panoramio
                        .col-2
                            button(type="button" class="btn btn-primary " id="photo_close" data-dismiss="modal") Close

mixin switch_button(name, ID)

    .switch-photo
        label.switch-light(onclick="" )
            input(class="switch-toogle" type="checkbox" id=ID value=name) 
            strong #{name}

            span.well
                span Off
                span On
                a.btn.btn-primary

mixin legend_boot(section,sort)
  //- read db.json
  - var obj = locals[0].Layers

  each layer in obj
    - var ID_leg = "leg_" + layer.ID
    - var ID_opy = "opy_" + layer.ID
    - var heading = "legH_" + layer.ID
    - var collapse = "leg_col_" + layer.ID
    - var ref_collapse = "#leg_col_" + layer.ID
    - var NM = layer.Name
    - var ref = "img/"  +   layer.ID  + ".svg"
    - var legend = layer.Legend

    div(id=ID_leg class="leg" role="tablist" aria-multiselectable="true")
        .panel.panel-default
            .panel-heading.collapsed(role="tab" id=heading rel="#{index++}")
                h3.panel-title
                    a(data-toggle="collapse" data-parent="#accordion" href=ref_collapse aria-expanded="true" aria-controls=ID_leg class="accordion-toggle")=NM 
        div(id=collapse class="panel-collapse collapse in" role="tabpanel" aria-labelledby=heading )
            .opy
                .opy_title Opacity:
                input(id=ID_opy class="opy_slider slider" data-id=layer.ID type="range" min="0" max="1" step="0.1" value="1" autocomplete="off" onchange="update_Opacity(this);")                
            
            if legend == "yes"
                img(src=ref alt=NM width="280px")  
                +mk_legend(layer.ID)

mixin table_boot(section,sort)

    //- read db.json
    - var obj = locals[0].Layers
    - var index = 0

    each layer in obj
      - var table = layer.ID
      - var ID_table = "tbl_" + layer.ID
      - var heading = "tbl2_" + layer.ID
      - var collapse = "tbl_col_" + layer.ID
      - var ref_collapse = "#tbl_col_" + layer.ID
      - var NM = layer.Name
      - var ref = "html/"  +   id  + ".html"
      - var legend = layer.Legend

      div(id=ID_table class="tbl" role="tablist" aria-multiselectable="true")
          .panel.panel-default
              .panel-heading.collapsed(role="tab" id=heading rel="#{index++}")
                  h3.panel-title                    
                      a(data-toggle="collapse" data-parent="#accordion" href=ref_collapse aria-expanded="true" aria-controls=ID_table)=NM        
          div(id=collapse class="panel-collapse collapse in" role="tabpanel" aria-labelledby=heading )
              +mk_table(layer.ID)

mixin mk_table (ID) 

    //- read db.json
    - var obj = locals[0].Layers
    - var layers = obj.ID

    each layer in obj
      - var table = layer.ID

      if ID == table
        table(id=table_ID class="table table-striped table-bordered table-hover table-sm" cellspacing="0" width="50%")
            tbody
                each val, key in layer
                  if key !== 'Type' && key !== 'Legend' && key !== 'Category_ID' && key !== 'Category'  && key !== 'Dataset'  && key !== 'ID'   && val !== '' 
                    tr(class="table_row")
                        td #{key}
                        td #{val}

mixin mk_legend (ID)

    //- read db.json
    - var obj = locals[0].Legend
    - var layers = locals[0].Layers

    each description, color in obj[0].GLC_00
    
        each layer in layers
            - var legend = layer.ID
            //- - var map = "obj."  +   layer.ID 
            - var map = obj.GLC_00 
            if ID == legend
                div(style= "width:10px;height:10px;border:1px; background " + color + ";") #{description}

//- legend = data[0].Legend;
//- 
//- console.log(legend[0].GLC_00);
